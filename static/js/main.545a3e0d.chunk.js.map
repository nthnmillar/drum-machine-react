{"version":3,"sources":["audio/909-HiHatClosed-D2.wav","audio/909-HiHatOpen-D0.wav","audio/909-HiTom-0D0.wav","audio/909-HiTom-7D0.wav","audio/909-HiTom-AD0.wav","audio/909-Kick-T0A0A7.wav","audio/909-Kick-T3A0D0.wav","audio/909-Kick-T7A0D0.wav","audio/909-LoTom-0D0.wav","SoundName.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SoundName","name","App","playSound","key","audioHtml","document","getElementById","play","innerHTML","undefined","then","catch","error","DrumButton","props","className","id","btnName","onClick","src","srcName","useState","press","setPress","match","event","toLowerCase","onDown","onUp","useEffect","window","addEventListener","removeEventListener","readyState","useKey","drum1","drum2","drum3","drum4","drum5","drum6","drum7","drum8","drum9","Boolean","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,8RC0B5BC,MAzBf,SAAmBC,GACjB,OAAOA,GACL,IAAK,IACH,MAAO,gBACT,IAAK,IACH,MAAO,cACT,IAAK,IACH,MAAO,aACT,IAAK,IACH,MAAO,aACT,IAAK,IACH,MAAO,aACT,IAAK,IACH,MAAO,cACT,IAAK,IACH,MAAO,cACT,IAAK,IACH,MAAO,cACT,IAAK,IACH,MAAO,aACT,QACE,S,MCiESC,MA1Ef,WA6BE,SAASC,EAAUC,GACjB,IAAIC,EAAYC,SAASC,eAAeH,GAAKI,OAC7CF,SAASC,eAAe,WAAWE,UAAWT,EAAUI,QACtCM,IAAdL,GACFA,EAAUM,MAAM,eAEbC,OAAO,SAACC,OAMf,SAASC,EAAWC,GAChB,OACA,yBAAKC,UAAU,WAAWC,GAAI,YAAcF,EAAMG,QAASC,QAAS,WAAOhB,EAAUY,EAAMG,WACvF,uBAAGF,UAAU,eAAeD,EAAMG,SAClC,2BAAOF,UAAU,OAAOC,GAAIF,EAAMG,QAASE,IAAOL,EAAMM,UA3ChE,SAAgBjB,GAAK,IAAD,EACQkB,oBAAS,GADjB,mBACXC,EADW,KACJC,EADI,KAEZC,EAAQ,SAAAC,GAAK,OAAItB,EAAIuB,gBAAkBD,EAAMtB,IAAIuB,eAEjDC,EAAS,SAAAF,GACTD,EAAMC,IAAQF,GAAS,IAEvBK,EAAO,SAAAH,GACPD,EAAMC,IAAQF,GAAS,IAgB7B,OAbAM,qBAAU,WAGR,OAFAC,OAAOC,iBAAiB,UAAWJ,GACnCG,OAAOC,iBAAiB,QAASH,GAC1B,WACLE,OAAOE,oBAAoB,UAAUL,GACrCG,OAAOE,oBAAoB,QAASJ,MAGtC,CAACzB,IAEyB,aAAxBE,SAAS4B,YACX/B,EAAUC,GAELmB,EAoBAY,CAAOpB,EAAMG,UAKtB,OACI,yBAAKF,UAAU,YAAYC,GAAG,gBAC1B,yBAAKA,GAAG,YAER,yBAAKD,UAAU,MAAMC,GAAG,SACtB,kBAACH,EAAD,CAAYI,QAAQ,IAAIG,QAASe,MACjC,kBAACtB,EAAD,CAAYI,QAAQ,IAAIG,QAASgB,MACjC,kBAACvB,EAAD,CAAYI,QAAQ,IAAIG,QAASiB,OAEnC,yBAAKtB,UAAU,OACb,kBAACF,EAAD,CAAYI,QAAQ,IAAIG,QAASkB,MACjC,kBAACzB,EAAD,CAAYI,QAAQ,IAAIG,QAASmB,MACjC,kBAAC1B,EAAD,CAAYI,QAAQ,IAAIG,QAASoB,OAEnC,yBAAKzB,UAAU,OACb,kBAACF,EAAD,CAAYI,QAAQ,IAAIG,QAASqB,MACjC,kBAAC5B,EAAD,CAAYI,QAAQ,IAAIG,QAASsB,MACjC,kBAAC7B,EAAD,CAAYI,QAAQ,IAAIG,QAASuB,SCrEzBC,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAAStB,MACvB,2D,MCXNuB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5C,SAASC,eAAe,SDwHpB,kBAAmB4C,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAC,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.545a3e0d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/909-HiHatClosed-D2.bf48fb20.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiHatOpen-D0.67b2afb3.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiTom-0D0.4aa175c9.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiTom-7D0.f3f467ec.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiTom-AD0.951485da.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-Kick-T0A0A7.eff3fdee.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-Kick-T3A0D0.53be264b.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-Kick-T7A0D0.d5c55c01.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-LoTom-0D0.92968b71.wav\";","\r\nfunction SoundName(name){ \r\n  switch(name){\r\n    case \"Q\":\r\n      return \"Hi Hat Closed\";\r\n    case \"W\":\r\n      return \"Hi Hat Open\";\r\n    case \"E\":\r\n      return \"Hi Tom 0D0\"\r\n    case \"A\":\r\n      return \"Hi Tom 7D0\"\r\n    case \"S\":\r\n      return \"Hi Tom AD0\"\r\n    case \"D\":\r\n      return \"Kick T0A0A7\"\r\n    case \"Z\":\r\n      return \"Kick T3A0D0\"\r\n    case \"X\":\r\n      return \"Kick T7A0D0\"\r\n    case \"C\":\r\n      return \"Lo Tom 0D0\"                                    \r\n    default:\r\n      return \r\n    }\r\n}\r\n\r\nexport default SoundName;","import drum1 from './audio/909-HiHatClosed-D2.wav';\r\nimport drum2 from './audio/909-HiHatOpen-D0.wav';\r\nimport drum3 from './audio/909-HiTom-0D0.wav';\r\nimport drum4 from './audio/909-HiTom-7D0.wav';\r\nimport drum5 from './audio/909-HiTom-AD0.wav';\r\nimport drum6 from './audio/909-Kick-T0A0A7.wav';\r\nimport drum7 from './audio/909-Kick-T3A0D0.wav';\r\nimport drum8 from './audio/909-Kick-T7A0D0.wav';\r\nimport drum9 from './audio/909-LoTom-0D0.wav';\r\nimport React, {useState, useEffect } from 'react';\r\nimport SoundName from './SoundName';\r\nimport 'bootstrap';\r\n\r\nfunction App(){\r\n\r\n  function useKey(key){\r\n    const [press, setPress] = useState(false)\r\n    const match = event => key.toLowerCase() === event.key.toLowerCase()\r\n    \r\n    const onDown = event => {\r\n      if (match(event)) setPress(false);\r\n    }\r\n    const onUp = event => {\r\n      if (match(event)) setPress(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n      window.addEventListener(\"keydown\", onDown)\r\n      window.addEventListener(\"keyup\", onUp)\r\n      return () => {\r\n        window.removeEventListener(\"keydown\",onDown)\r\n        window.removeEventListener(\"keyup\", onUp)\r\n      }\r\n      \r\n    },[key])\r\n    \r\n    if (document.readyState === \"complete\"){\r\n      playSound(key);\r\n    }\r\n    return press\r\n  }\r\n\r\n  function playSound(key){ \r\n    let audioHtml = document.getElementById(key).play();\r\n    document.getElementById(\"display\").innerHTML= SoundName(key);\r\n    if (audioHtml !== undefined){\r\n      audioHtml.then( () => {\r\n        // Playback started \r\n      }).catch( (error) => {\r\n        // failed.\r\n      });\r\n    }\r\n  }\r\n\r\n  function DrumButton(props){\r\n      return (\r\n      <div className=\"drum-pad\" id={\"drum-pad-\" + props.btnName} onClick={() => {playSound(props.btnName);}} >\r\n          <p className=\"text-center\">{props.btnName}</p>       \r\n          <audio className=\"clip\" id={props.btnName} src = {props.srcName}></audio>\r\n          {useKey(props.btnName)}\r\n        </div>\r\n      )\r\n  }\r\n\r\n  return (\r\n      <div className=\"container\" id=\"drum-machine\">\r\n          <div id=\"display\">\r\n          </div>\r\n          <div className=\"row\" id=\"row-1\">  \r\n            <DrumButton btnName=\"Q\" srcName={drum1}/>\r\n            <DrumButton btnName=\"W\" srcName={drum2}/>\r\n            <DrumButton btnName=\"E\" srcName={drum3}/>                                  \r\n          </div>\r\n          <div className=\"row\">  \r\n            <DrumButton btnName=\"A\" srcName={drum4}/>\r\n            <DrumButton btnName=\"S\" srcName={drum5}/>\r\n            <DrumButton btnName=\"D\" srcName={drum6}/>                                  \r\n          </div>\r\n          <div className=\"row\">  \r\n            <DrumButton btnName=\"Z\" srcName={drum7}/>\r\n            <DrumButton btnName=\"X\" srcName={drum8}/>\r\n            <DrumButton btnName=\"C\" srcName={drum9}/>                                  \r\n          </div>     \r\n      </div>     \r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './style.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}